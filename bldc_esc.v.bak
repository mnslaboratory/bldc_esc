 module combined_bldc_esc #(
  parameter DATA_WIDTH = 16, //only used at the 3rd subroutine
  parameter ENCODER_WIDTH = 3 //stop using it
)(
  input wire clk,              	// clock input. when there is no clk signal motor does not run
  input wire reset,            	// when it is 1 motor does run
  input wire encoder_a,  	// encoder A pin input
  input wire encoder_b,  	// encoder B pin input
  output wire motor_positive,   // BLDC motor PWM signal
  output wire motor_negative  	// Motor direction control (1 bit)
);
  
  reg motor_pwm;
  parameter PWM_PERIOD = 17'd3; //change period here e.g. 3,4,5,6
  reg [16:0] pwm_counter;
  reg [16:0] pwm_duty_cycle;
  reg motor_positive_var;
  reg motor_negative_var;
  // Ask encoder's current and previous states in the 2nd subroutine
  reg [1:0]encoder_state;
  reg [1:0]prev_encoder_state;
  
  assign pwm_duty_cycle = pid_output; // BU BAĞLANTI ÇOK ÖNEMLİ ÇALIŞMIYOR OLABİLİR.
//1st subroutin=PWM GENERATOR////////////////////////////////////////////// 
 always @(posedge clk or posedge reset) begin
    if (reset) begin
      pwm_counter <= 17'b0;
    end else begin
      pwm_counter <= pwm_counter + 1;

      motor_pwm <= (pwm_counter < pwm_duty_cycle); // Generate PWM signal and send it to the motor

      // Reset PWM counter at the end of the PWM period
      if (pwm_counter == PWM_PERIOD) begin
        pwm_counter <= 17'd0;
      end
    end
  end
 
///////////////////////////////////////////////////////
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      encoder_state <= 2'b0;
      prev_encoder_state <= 2'b0;
      motor_positive_var <= 1'b0;
      motor_negative_var <= 1'b0;
      motor_positive <= 1'b0;
      motor_negative <= 1'b0;
    end else begin
    encoder_state <= {encoder_a, encoder_b};
      case ({encoder_state, prev_encoder_state})
      // No change (no rotation)
      4'b0000: begin
        motor_positive_var <= 1'b0;
        motor_negative_var <= 1'b0;
      end

      // Rotate in one direction (e.g., forward)
      4'b0100, 4'b1000: begin
        motor_positive <= motor_pwm;
        motor_negative <= 1'b0;
      end

      // Rotate in the opposite direction (e.g., reverse)
      4'b0010, 4'b0001: begin
        motor_positive <= 1'b0;
        motor_negative <= motor_pwm;
      end

      // No change (no rotation)
      4'b1100, 4'b0011, 4'b1110, 4'b1111: begin
        motor_positive <= 1'b0;
        motor_negative <= 1'b0;
      end

      default: begin
        // Keep the previous direction in case of an unexpected state
        motor_positive_var <= motor_positive_var;
        motor_negative_var <= motor_negative_var;
      end
    endcase
      prev_encoder_state <= encoder_state;
    end
  end
//PID control////////////////////////////////////////////////
  
 // PID constants
  localparam DATA_WIDTH_INIT = 16'h0;
  reg [DATA_WIDTH-1:0] reference = DATA_WIDTH_INIT;
  reg [DATA_WIDTH-1:0] speed = DATA_WIDTH_INIT;// Bunu countera bağlamakta yarar olabilir.
  parameter Kp = {DATA_WIDTH{1'b1}};
  parameter Ki = {DATA_WIDTH{1'b0}};
  parameter Kd = {DATA_WIDTH{1'b0}};


  // Variables for PID control
  reg [DATA_WIDTH-1:0] error;
  reg [(DATA_WIDTH+1)-1:0] integral;
  reg [DATA_WIDTH-1:0] derivative;
  reg [(DATA_WIDTH+1)-1:0] pid_output;
  reg [DATA_WIDTH-1:0] previous_error;

  // Calculate the error
  always @(*) begin
    error = reference - speed;
  end

  // Calculate the integral
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      integral <= 17'b0;
    end else begin
      if (integral + error > 32767) begin //These are very high values for ASIC, need to push for lower register

        integral <= 32767;  
      end else if (integral + error < -32768) begin
      
        integral <= -32768; 
      end else begin
        integral <= integral + error;  
      end
    end
  end

  // Calculate the derivative
  always @(*) begin
    derivative = error - previous_error;
  end

  // Calculate the PID output
  always @(*) begin
    pid_output = Kp * error + Ki * integral + Kd * derivative;
  end

  // Initialize internal signals on reset
  always @(posedge reset) begin
    integral <= 17'b0;
    previous_error <= {DATA_WIDTH{1'b0}};
  end
endmodule
