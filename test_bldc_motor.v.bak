 module test_bldc_motor #(//MOTOR EMULATION MODULE
  parameter DATA_WIDTH = 16,
)(
  input wire clk,              		// clock input. when there is no clk signal motor does not run
  input wire reset,            		// when it is 1 motor does run
  output wire encoder_a,  				// encoder A pin output
  output wire encoder_b,  				// encoder B pin output
  input reg motor_positive,   		// BLDC motor PWM signal
  input reg motor_negative 			// Motor direction control (1 bit)
  
);

//Infer PWM Duty Cycle
	reg [DATA_WIDTH-1:0] pwm_counter;

	reg [DATA_WIDTH-1:0] pwm_duty_cycle_ones;
	reg[1:0] count_direction;
	
	always @(posedge reset or posedge motor_positive or motor_negative) 
	begin
		if(reset) begin
			count_direction<=2'b00;
		end else begin
			if(motor_positive) begin
				count_direction<=2'b10;//forward motion
			end else if(motor_negative) begin
				count_direciton<=2'b01;
			end else begin
				count_direction<=2'b00;
			end
			
		end
		
	end
	
	always @(posedge clk or posedge reset) 
	begin
		if(reset) begin
			pwm_counter<={DATA_WIDTH-1{1'b0}};
			pwm_duty_cycle_ones<={DATA_WIDTH-1{1'b0}};
		end else begin
			case(count_direction)
        2'b01:begin
          pwm_counter<=pwm_counter+1;
			 if(motor_negative==1'b1) begin
				pwm_duty_cycle_ones<=pwm_duty_cycle_ones+1;
			 end
        end
        2'b10:begin
          pwm_counter<=pwm_counter+1;
			 if(motor_positive==1'b1) begin
				pwm_duty_cycle_ones<=pwm_duty_cycle_ones+1;
			 end
        end
        default: begin
				pwm_counter<={DATA_WIDTH-1{1'b0}};
				pwm_duty_cycle_ones<={DATA_WIDTH-1{1'b0}};
        end
      endcase
		end
		
	end
	

endmodule
